
```{julia}

using Random
using Distributions
using Plots
```

```{julia}

Random.seed!(8675309)

n_samples = 2
mu = 2
sd = 0.5
N = 10000
n_bins = 100
bin_size = Int(N/n_bins)
normal_dist = Normal(mu, sd)
```


```{julia}

norm_samples = Vector{Number}[]

for i in 1:n_samples
    push!(norm_samples, rand(normal_dist, N))
end

# inspect
for i in norm_samples
    println(i[1:5], "\n")
end
```


We inspect the dataset to make sure we're getting what we think we are:

```{julia}
histogram(norm_samples[1])
```

We now want to apply the transformation to make them log-normal.

$$
X \sim Normal(\mu, \sigma)
$$

...then,

$$
exp(X) \sim LogNormal(\mu,\sigma)
$$


```{julia}

exp_vector(vec) = [exp(i) for i in vec]

samples = [exp_vector(sample) for sample in norm_samples]

histogram(samples[1])
```


We can see we've transformed it. The first step in the algorithm calls for calculating $\theta$ s for each of our samples:


```{julia}


function get_sample_info(sample, sample_name; n_bins)    

    theta_boots = []

    j = 1
    for x in 1:n_bins
        k = j  + (bin_size-1)
        # println("from ", j, " to ", k)
        push!(theta_boots, mean(sample[j:k]))
        j += bin_size
    end

    output = Dict()
    
    output["name"] = sample_name
    output["mean"] = mean(sample)
    output["sd"] = std(sample)
    output["bootstrap_means"] = theta_boots
    
    output

end

sample1 = get_sample_info(samples[1], "sample1", n_bins = n_bins)
```

Now we have a dictionary containing the information about a samples we need to compare it to another.

```{julia}
sample1
```

We will get another sample to compare it to.

```{julia}
sample2 = get_sample_info(samples[2], "sample2", n_bins = n_bins)
```

## Under the null

```{julia}

function calc_root_stat1(m1, m1b, sd1, m2, m2b, sd2, N)
    # K^1
    se = sqrt( ((sd1)/N) + ((sd2^2)/N) )
    abs( (m1b - m2b) - (m1 - m2)/se )
end

function calc_root_stat2(m1, m1b, sd1, m2, m2b, sd2, M)
    # M^1    
    se = sqrt( ((sd1)/M) + ((sd2^2)/M) )
    abs( (m1b - m2b) - (m1 - m2)/se )
end


function calc_root_stat3(m1, m1b, sd1, m2, m2b, sd2, M, K)
    
    se = sqrt( (((sd1)) + ((sd2^2))) * (M*K))
    abs( (m1b - m2b) - (m1 - m2)/se )
end


m1 = sample1["mean"]
m2 = sample2["mean"]

sd1 = sample1["sd"]
sd2 = sample2["sd"]

m1boots = sample1["bootstrap_means"]
m2boots = sample2["bootstrap_means"]



r_stats = []

for i in 1:n_bins
    push!(r_stats, calc_root_stat1(m1, m1boots[i], sd1, m2, m2boots[i], sd2, N))
end

r_stats

histogram(r_stats)
```

## Under the alternative

Create two new samples, this time give one a different mean but a similar standard deviation.

```{julia}
new_samples = [
    rand(Normal(mu, sd), N),
    # introduce a mean that is higher
    rand(Normal(4, sd), N)
]

sample3 = get_sample_info(new_samples[1], "sample3", n_bins = n_bins)
sample4 = get_sample_info(new_samples[2], "sample4", n_bins = n_bins)
```

### Method 1

```{julia}

m1 = sample3["mean"]
m2 = sample4["mean"]

sd1 = sample3["sd"]
sd2 = sample4["sd"]

m1boots = sample3["bootstrap_means"]
m2boots = sample4["bootstrap_means"]
```

```{julia}

r_stats = []

for i in 1:n_bins
    push!(r_stats, calc_root_stat1(m1, m1boots[i], sd1, m2, m2boots[i], sd2, N))
end

r_stats

histogram(r_stats)
```

```{julia}


d = quantile(r_stats, 1-0.05)

se = sqrt( ((sd1^2)/N) + ((sd2^2)/N) )

println("low ", (m1 - m2) - (d*se) )
println("observed ", (m1 - m2))
println("high ", (m1 - m2) + (d*se) )
```

### Method 2

```{julia}

r_stats = []

for i in 1:n_bins
    push!(r_stats, calc_root_stat2(m1, m1boots[i], sd1, m2, m2boots[i], sd2, n_bins))
end

r_stats

histogram(r_stats)
```

```{julia}

d = quantile(r_stats, 1-0.05)

se = sqrt( ((sd1^2)/n_bins) + ((sd2^2)/n_bins) )

println("low ", (m1 - m2) - (d*se) )
println("observed ", (m1 - m2))
println("high ", (m1 - m2) + (d*se) )
```


## Method 3

```{julia}

r_stats = []

for i in 1:n_bins
    push!(r_stats, calc_root_stat3(m1, m1boots[i], sd1,
                                    m2, m2boots[i], sd2, n_bins, N))
end

r_stats

histogram(r_stats)
```

```{julia}

d = quantile(r_stats, 1-0.05)

se = sqrt( ((sd1^2)) + ((sd2^2)) * (n_bins * N) )

println("low ", (m1 - m2) - (d*se) )
println("observed ", (m1 - m2))
println("high ", (m1 - m2) + (d*se) )
```