
```{julia}

using Random
using Distributions
using Plots
# using LaTeXStrings
```

```{julia}

Random.seed!(8675309)

n_samples = 3
mu = 2
sd = 0.5
N = 1000
n_bins = 10 
bin_size = Int(N/n_bins)
normal_dist = Normal(mu, sd)
```


```{julia}

norm_samples = Vector{Number}[]

for i in 1:n_samples
    push!(norm_samples, rand(normal_dist, N))
end

# inspect
for i in norm_samples
    println(i[1:5], "\n")
end
```


We inspect the dataset to make sure we're getting what we think we are:

```{julia}
histogram(norm_samples[1])
```

We now want to apply the transformation to make them log-normal.

$$
X \sim Normal(\mu, \sigma)
$$

...then,

$$
exp(X) \sim LogNormal(\mu,\sigma)
$$


```{julia}

exp_vector(vec) = [exp(i) for i in vec]

samples = [exp_vector(sample) for sample in norm_samples]

histogram(samples[1])
```


We can see we've transformed it. The first step in the algorithm calls for calculating $\theta$ s for each of our samples:





```{julia}


function get_thetas(samples::Vector{Vector{Float64}})

    output = Dict()

    for i in 1:length(samples)
        s = samples[i]
        sample_name = string(sample, i)
        output[sample_name] = (mean(s), std(s))
    end

    output

end

thetas = get_thetas(samples)
```


```{julia}



j = 1
for x in 1:n_bins
    k = j  + (bin_size-1)
    # println("from ", i, " to ", j)
    j += bin_size
end
```


```{julia}

```

```{julia}

function get_theta_boots(thetas)

    output = Dict()

    for (k, v) in thetas
        println(k, " is k ", v)
        # dist_boot = Normal(v[1], v[2])
        # sample_boot = rand(dist_boot, 1000)
        # output[k] = (mean(sample_boot), std(sample_boot))
    end

    output
end

theta_boots = get_theta_boots(thetas)
```

We note these look similar but not identical to the observed values we saw. We can now do the required comparisons.

```{julia}

function calcR(t, tb, sd, t_hat, tb_hat, sd_hat, j, jp)

    println("Compare ", j, " to ", jp)

    se = sqrt( ((sd^2)/1000) + ((sd_hat^2)/1000) )
    r = abs((tb - tb_hat) - (t - tb)/se)
    println(r)    
    
end

# a list of the sample names in order
sample_names = [string("sample", i) for i in 1:length(samples)]
 
# for every sample...
for j in sample_names
    
    t = thetas[j][1]
    sd = thetas[j][2]
    tb = theta_boots[j][1]
    
    # ...for every *other* sample (not itself)
    for jp in sample_names
        if j != jp
            t_hat = thetas[jp][1]
            sd_hat = thetas[jp][2]
            tb_hat = theta_boots[jp][1]
            calcR(t, tb, sd, t_hat, tb_hat, sd_hat, j, jp)
        end
    end

end

```





```{julia}

# generate_dataset(normal_dist, n = 3)

# samples = [exp_vector(sample) for sample in generate_dataset(normal_dist, n = 3)]

# thetas = get_thetas(samples)

# theta_boots = get_theta_boots(thetas)

# # a list of the sample names in order
# sample_names = [string("sample", i) for i in 1:length(samples)]
 
# # for every sample...
# for j in sample_names
    
#     t = thetas[j][1]
#     sd = thetas[j][2]
#     tb = theta_boots[j][1]
    
#     # ...for every *other* sample (not itself)
#     for jp in sample_names
#         if j != jp
#             t_hat = thetas[jp][1]
#             sd_hat = thetas[jp][2]
#             tb_hat = theta_boots[jp][1]
#             calcR(t, tb, sd, t_hat, tb_hat, sd_hat, j, jp)
#         end
#     end

# end

function algorithmI(reps)

    generate_dataset(normal_dist, n = 3)

    samples = [exp_vector(sample) for sample in generate_dataset(normal_dist, n = 3)]

    thetas = get_thetas(samples)

    for rep_num in 1:reps

        println("rep: ", rep_num)

        theta_boots = get_theta_boots(thetas)

        # a list of the sample names in order
        sample_names = [string("sample", i) for i in 1:length(samples)]
        
        # for every sample...
        for j in sample_names
            
            t = thetas[j][1]
            sd = thetas[j][2]
            tb = theta_boots[j][1]
            
            # ...for every *other* sample (not itself)
            for jp in sample_names
                if j != jp
                    t_hat = thetas[jp][1]
                    sd_hat = thetas[jp][2]
                    tb_hat = theta_boots[jp][1]
                    calcR(t, tb, sd, t_hat, tb_hat, sd_hat, j, jp)
                end
            end

        end    
    end

end

algorithmI(4)
```
