
```{julia}

using Random
using Distributions
using Plots
# using LaTeXStrings
```

```{julia}

Random.seed!(8675309)

mu = 2
sd = 0.5

normal_dist = Normal(mu, sd)
```

```{julia}

function generate_dataset(dist; n::Int64 = 10, draws::Int64 = 1000)         
    
    results_vec = Array{Number}[]
    
    for i in 1:n
        x_i = rand(dist, draws)
        push!(results_vec, x_i)
    end

    results_vec

end

norm_samples = generate_dataset(normal_dist, n = 3);
```

We inspect one of the samples to make sure we're getting what we thing we are:

```{julia}
histogram(norm_samples[1])
```

We now want to apply the transformation to make them log-normal.

$$
X \sim Normal(\mu, \sigma)
$$

...then,

$$
exp(X) \sim LogNormal(\mu,\sigma)
$$


```{julia}


function exp_vector(vec)
    [exp(i) for i in vec]
end

samples = [exp_vector(sample) for sample in norm_samples]

histogram(samples[1])
```

We can see we've transformed it. The first step in the algorithm calls for calculating $\theta$ s for each of our samples:


```{julia}


function get_thetas(samples::Vector{Vector{Float64}})

    output = Dict()

    for i in 1:length(samples)
        s = samples[i]
        sample_name = string(sample, i)
        output[sample_name] = (mean(s), std(s))
    end

    output

end

thetas = get_thetas(samples)
```

```{julia}

function get_theta_boots(thetas)

    output = Dict()

    for (k, v) in thetas
        dist_boot = Normal(v[1], v[2])
        sample_boot = rand(dist_boot, 1000)
        output[k] = (mean(sample_boot), std(sample_boot))
    end

    output
end

theta_boots = get_theta_boots(thetas)
```

We note these look similar but not identical to the observed values we saw. We can now do the required comparisons.

```{julia}

function calcR(t, tb, t_hat, tb_hat, j, jp)
    println("Compare ", j, " to ", jp)
end

# a list of the sample names in order
sample_names = [string("sample", i) for i in 1:length(samples)]

# for every sample...
for j in sample_names
    
    t = thetas[j][1]
    tb = theta_boots[j][1]

    # ...for every OTHER sample (not itself)
    for jp in sample_names
        if j != jp
            t_hat = thetas[jp][1]
            tb_hat = theta_boots[jp][1]
            calcR(t, tb, t_hat, tb_hat, j, jp)
        end
    end

end

```


