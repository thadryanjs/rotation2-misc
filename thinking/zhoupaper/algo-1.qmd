
```{julia}

using Random
using Distributions
using Plots
using LaTeXStrings
```

```{julia}

Random.seed!(8675309)

log_normal = LogNormal(0.0, 1.0)

xi = rand(log_normal, 1000)
```

```{julia}

histogram(xi, label = L"$x_i$")
```

```{julia}

function generate_dataset(; n::Int64 = 10, mu::Number = 2,
    sd::Number = 0.5, draws::Int64 = 1000)         
    
    log_normal = LogNormal(mu, sd)
    results_vec = Array{Number}[]
    for i in 1:n
        x_i = rand(log_normal, draws)
        push!(results_vec, x_i)
    end
    results_vec

end

samples = generate_dataset(n = 3);
```


```{julia}

function bootstrap_thetas(samples::Array{Array{Number}};
    boot_num::Int = 100, draws_per_boot::Int = 10)

    # first, get a list of the means and bootstrap means
    thetas = Number[]
    theta_boots_lists = Array{Number}[]

    for s in samples
        # get the sample mean
        theta = mean(s)
        push!(thetas, theta)
        # get the bootstrap means
        theta_boots = Number[]
        for b in 1:boot_num
            theta_boot = mean(rand(s, draws_per_boot))
            push!(theta_boots, theta_boot)
        end
        push!(theta_boots_lists, theta_boots)
    end

    thetas, theta_boots_lists
end

results = bootstrap_thetas(samples, boot_num = 5)
```

```{julia}

thetas = results[1]
theta_boots = results[2]

function root_statistic(thetas::Array{Number}, theta_boots::Array{Array{Number}})
    for i in 1:length(thetas)
        theta = thetas[i]
        println(theta)
        for j in 1:length(theta_boots[i])
            x = (theta - theta_boots[i][j])
            println("\t", stat)
        end
    end
end

println(length(theta_boots[1]))
root_statistic(thetas, theta_boots)
```


```{julia}


function get_thetas(samples::Array{Array{Number}})
    
    output_array = Number[]

    for s in samples
        push!(output_array, mean(s))
    end

    output_array

end

thetas = get_thetas(samples)
```

```{julia}

function get_theta_boots(thetas::Array{Number}; k::Int64 = 10)

    theta_boots = Number[]

    for t in thetas
        # will need to get a sd no?
        dist_boot = LogNormal(t, 0)
        bootstrap_sample = rand(log_normal, 1000)
        push!(theta_boots, mean(bootstrap_sample))
    end

    theta_boots

end

get_theta_boots(thetas)
```

